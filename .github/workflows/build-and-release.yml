name: Build and Release D-deskcal

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (e.g., v1.0.0, v1.2.3)
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install Windows SDK and Inno Setup
      run: |
        # Install Windows SDK for signtool
        choco install windows-sdk-10.1 --force --no-progress
        # Add signtool to PATH
        $env:PATH += ";C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64"
        echo "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64" | Out-File -FilePath $env:GITHUB_PATH -Append

        # Install Inno Setup
        choco install innosetup --force --no-progress
        # Add Inno Setup to PATH
        $env:PATH += ";C:\Program Files (x86)\Inno Setup 6"
        echo "C:\Program Files (x86)\Inno Setup 6" | Out-File -FilePath $env:GITHUB_PATH -Append
    
    - name: Create credentials.json from secret
      run: |
        $credentialsContent = @'
        ${{ secrets.GOOGLE_CREDENTIALS }}
        '@
        $credentialsContent | Out-File -FilePath "credentials.json" -Encoding UTF8
        Write-Host "‚úÖ credentials.json created from GitHub Secret"

        # Verify file was created properly
        if (Test-Path "credentials.json") {
          $size = (Get-Item "credentials.json").Length
          Write-Host "üìÑ credentials.json size: $size bytes"
        } else {
          Write-Host "‚ùå Failed to create credentials.json"
          exit 1
        }
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller==6.14.1
        pip install pyinstaller-hooks-contrib
        pip install -r requirements.txt
        pip freeze > freeze_ci.txt
      env:
        PYTHONIOENCODING: utf-8
    
    - name: Verify icon file exists
      run: |
        if (Test-Path "icons/tray_icon.ico") {
          Write-Host "‚úÖ Icon file found: icons/tray_icon.ico"
        } else {
          Write-Host "‚ùå Icon file missing: icons/tray_icon.ico"
          exit 1
        }
    
    - name: Build application
      run: |
        python build_script.py
    
    - name: Verify build output
      run: |
        if (Test-Path "dist/D-deskcal") {
          Write-Host "‚úÖ Build successful: dist/D-deskcal"
          Get-ChildItem -Path "dist/D-deskcal" -Recurse | Select-Object Name, Length
        } else {
          Write-Host "‚ùå Build failed: dist/D-deskcal not found"
          exit 1
        }

    - name: Clean up sensitive files
      run: |
        # Remove credentials.json for security
        if (Test-Path "credentials.json") {
          Remove-Item "credentials.json" -Force
          Write-Host "üßπ Cleaned up credentials.json"
        }
    
    - name: Sign executable
      run: |
        # Check if signing certificate is available
        $signingCert = "${{ secrets.SIGNING_CERTIFICATE }}"
        if ([string]::IsNullOrEmpty($signingCert)) {
          Write-Host "‚è≠Ô∏è No signing certificate configured, skipping code signing"
          exit 0
        }

        # Base64 decode certificate and save to temp file
        $certBytes = [System.Convert]::FromBase64String($signingCert)
        $certPath = "temp_cert.p12"
        [System.IO.File]::WriteAllBytes($certPath, $certBytes)
        
        # Sign the main executable
        $exePath = "dist/D-deskcal/D-deskcal.exe"
        if (Test-Path $exePath) {
          signtool sign /f $certPath /p "${{ secrets.SIGNING_PASSWORD }}" /t http://timestamp.digicert.com /fd sha256 $exePath
          Write-Host "‚úÖ Signed executable: $exePath"
          
          # Verify signature
          signtool verify /pa $exePath
          Write-Host "‚úÖ Signature verified"
        } else {
          Write-Host "‚ùå Executable not found: $exePath"
        }
        
        # Clean up certificate file
        Remove-Item $certPath -Force
      env:
        SIGNING_CERTIFICATE: ${{ secrets.SIGNING_CERTIFICATE }}
        SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}

    - name: Create Inno Setup installer
      run: |
        # Get version from VERSION file
        $version = Get-Content -Path "VERSION" -Raw
        $version = $version.Trim()
        Write-Host "üìã Version: $version"

        # Create release directory if it doesn't exist
        if (-not (Test-Path "release")) {
          New-Item -ItemType Directory -Path "release"
          Write-Host "üìÅ Created release directory"
        }

        # Replace version placeholder in Inno Setup script
        $issContent = Get-Content -Path "D-deskcal-installer.iss" -Raw
        $issContent = $issContent -replace "{{VERSION_PLACEHOLDER}}", $version
        $issContent | Out-File -FilePath "D-deskcal-installer-temp.iss" -Encoding UTF8
        Write-Host "‚úÖ Created temporary Inno Setup script with version $version"

        # Compile Inno Setup installer
        $innoSetupPath = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
        if (Test-Path $innoSetupPath) {
          Write-Host "üîß Building Inno Setup installer..."
          & $innoSetupPath "D-deskcal-installer-temp.iss"

          if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Inno Setup installer created successfully"

            # List installer files
            Get-ChildItem -Path "release" -Filter "*.exe" | ForEach-Object {
              $size = [math]::Round($_.Length / 1MB, 2)
              Write-Host "üì¶ Installer: $($_.Name) ($size MB)"
            }
          } else {
            Write-Host "‚ùå Inno Setup compilation failed"
            exit 1
          }
        } else {
          Write-Host "‚ùå Inno Setup not found at: $innoSetupPath"
          exit 1
        }

        # Clean up temporary file
        if (Test-Path "D-deskcal-installer-temp.iss") {
          Remove-Item "D-deskcal-installer-temp.iss" -Force
          Write-Host "üßπ Cleaned up temporary Inno Setup script"
        }

    - name: Create portable zip
      run: |
        $version = Get-Content -Path "VERSION" -Raw
        $version = $version.Trim()
        $portableName = "D-deskcal-v$version-portable.zip"

        # Create portable zip with all necessary files
        Compress-Archive -Path "dist/D-deskcal/*" -DestinationPath "dist/$portableName" -Force

        Write-Host "‚úÖ Created portable: $portableName"

        # Verify portable file
        if (Test-Path "dist/$portableName") {
          $size = (Get-Item "dist/$portableName").Length / 1MB
          Write-Host "üì¶ Portable size: $([math]::Round($size, 2)) MB"
        }
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: D-deskcal-build
        path: |
          dist/D-deskcal-v*-portable.zip
          dist/D-deskcal/
          release/D-deskcal-v*-installer.exe
          freeze_ci.txt
          build/*.toc
          build/*.txt
    
    - name: Get version
      id: version
      run: |
        $version = Get-Content -Path "VERSION" -Raw
        $version = $version.Trim()
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "TAG_NAME=v$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    
    
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $tagName = "${{ steps.version.outputs.TAG_NAME }}"
        
        $releaseBody = @"
        ## D-deskcal v$version
        
        ### üì¶ Downloads
        - **Windows Installer**: D-deskcal-v$version-installer.exe (Recommended)
        - **Portable ZIP**: D-deskcal-v$version-portable.zip
        
        ### üöÄ Features
        - Desktop calendar widget with Google Calendar integration
        - System tray integration  
        - Local-first data storage
        - Auto-update functionality
        
        ### üìã Installation
        1. Download the installer zip file
        2. Extract to your desired location
        3. Run ``D-deskcal.exe``
        4. Configure your Google Calendar (optional)
        
        ### ‚öôÔ∏è System Requirements
        - Windows 10/11
        - Internet connection (for Google Calendar sync)
        
        ### üîÑ Auto-Update
        This version includes automatic update checking. The application will notify you when new updates are available.
        
        ---
        
        **Full Changelog**: https://github.com/thejurio/D-deskcal/commits/$tagName
        "@
        
        gh release create "$tagName" "release/D-deskcal-v$version-installer.exe" "dist/D-deskcal-v$version-portable.zip" --title "D-deskcal v$version" --notes "$releaseBody"
    

  notify-completion:
    needs: build-windows
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Build Success Notification
      run: |
        echo "üéâ D-deskcal build and release completed successfully!"
        echo "üì¶ Release available at: https://github.com/thejurio/D-deskcal/releases/latest"