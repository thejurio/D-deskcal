# 프로젝트 분석 보고서

## 1. 프로젝트 개요

이 프로젝트는 PyQt6 프레임워크를 기반으로 제작된 데스크톱 캘린더 위젯 애플리케이션입니다. 주요 목표는 사용자의 일정을 시각적으로 표시하고 관리하는 것으로, 다음과 같은 핵심 기능을 제공합니다.

- **다중 캘린더 연동**: Google 캘린더와 로컬 데이터베이스 기반의 개인 캘린더를 동시에 지원합니다.
- **다양한 뷰 모드**: 월별(Month View) 및 주별(Week View) 뷰를 제공하여 사용자가 필요에 따라 전환할 수 있습니다.
- **투명 UI**: 유리처럼 반투명한 "Glassmorphism" 스타일의 UI를 적용하여 바탕화면 위젯으로서의 미적 요소를 강조합니다.
- **지능형 데이터 관리**: 백그라운드 스레드를 통해 데이터를 캐싱하고 동기화하여 UI의 끊김 없는 사용성을 보장합니다.
- **상세한 일정 관리**: 반복 일정, 종일 일정, 설명 추가 등 상세한 옵션을 포함한 이벤트 생성 및 편집 기능을 제공합니다.

## 2. 주요 아키텍처 및 디자인 패턴

이 애플리케이션은 유지보수성과 확장성을 고려한 현대적인 소프트웨어 아키텍처 패턴을 따릅니다.

- **Model-View-Controller (MVC) 유사 패턴**:
    - **Model**: 데이터와 비즈니스 로직을 담당합니다. `DataManager`, `AuthManager`, 그리고 `providers` 패키지의 캘린더 제공자들이 여기에 해당합니다. 데이터의 CRUD(생성, 읽기, 수정, 삭제) 및 동기화 로직을 모두 포함합니다.
    - **View**: 사용자 인터페이스(UI)를 표시합니다. `ui_main.py`의 `MainWidget`, `views` 패키지의 `MonthViewWidget`, `WeekViewWidget`, 그리고 `EventEditorWindow`와 같은 각종 다이얼로그 창들이 해당됩니다.
    - **Controller**: 사용자의 입력을 받아 Model과 View를 연결하는 역할을 합니다. PyQt의 시그널-슬롯 메커니즘이 이 역할을 수행하며, 예를 들어 `MainWidget`에서 버튼 클릭 시 `DataManager`의 메서드를 호출하는 코드가 컨트롤러 로직에 해당합니다.

- **Provider 패턴**:
    - `providers/base_provider.py`에 정의된 `BaseCalendarProvider` 추상 클래스는 모든 캘린더 데이터 소스가 따라야 할 공통 인터페이스(API)를 정의합니다.
    - `GoogleCalendarProvider`와 `LocalCalendarProvider`는 이 인터페이스를 각각 Google API와 SQLite에 맞게 구체적으로 구현합니다. 이 구조 덕분에 향후 다른 서비스(예: Outlook, CalDAV)를 추가하기 용이합니다.

- **옵저버 패턴 (시그널-슬롯 메셔니즘)**:
    - PyQt의 핵심 기능인 시그널과 슬롯을 적극적으로 활용하여 컴포넌트 간의 결합도를 낮춥니다. 예를 들어, `DataManager`에서 데이터가 변경되면 `data_updated` 시그널을 발생시키고, `MonthViewWidget`와 `WeekViewWidget`는 이 시그널에 연결된 슬롯을 통해 자신의 UI를 새로고침합니다.

- **백그라운드 처리를 위한 멀티스레딩**:
    - `DataManager`는 `CachingManager`를 별도의 `QThread`에서 실행합니다. `CachingManager`는 시간이 오래 걸리는 네트워크 작업(Google API 연동)이나 데이터베이스 동기화를 백그라운드에서 처리하여 UI가 멈추는 현상을 방지하고 부드러운 사용자 경험을 제공합니다.

## 3. 핵심 모듈 및 클래스 상세 분석

### `data_manager.py`: 데이터 관리의 중심
- **`DataManager`**: 애플리케이션의 모든 데이터 흐름을 총괄하는 중앙 허브입니다.
    - `AuthManager`를 통해 인증 상태를 관리하고, 상태에 따라 `GoogleCalendarProvider`를 활성화/비활성화합니다.
    - `event_cache` 딕셔너리를 통해 월별 이벤트 데이터를 메모리에 캐싱하여 빠른 접근을 지원합니다.
    - `get_events`, `add_event`, `update_event`, `delete_event` 등 UI에서 필요한 데이터 CRUD 메서드를 제공합니다. 이 메서드들은 실제 작업을 적절한 Provider에게 위임합니다.
- **`CachingManager`**: 지능형 캐싱 및 동기화를 담당하는 백그라운드 작업자입니다.
    - 사용자가 현재 보고 있는 달의 주변 달들(예: 이전 3개월, 이후 3개월)을 미리 캐싱하여 부드러운 월 이동을 가능하게 합니다.
    - `QTimer`와 연동하여 주기적으로 전체 데이터를 동기화합니다.
    - `user_action_priority` 컨텍스트 매니저를 통해 사용자가 이벤트를 추가하는 등 중요한 작업을 할 때는 백그라운드 작업을 잠시 멈추어 UI 반응성을 최우선으로 보장합니다.

### `auth_manager.py`: 인증 전문가
- **`AuthManager`**: Google 계정 인증과 관련된 모든 복잡한 과정을 처리합니다.
    - OAuth 2.0 인증 흐름을 진행하고, 발급받은 인증 정보(`token.json`)를 저장, 로드, 갱신합니다.
    - `login`, `logout`, `is_logged_in` 등 명확한 메서드를 제공하여 다른 클래스들이 쉽게 인증 상태를 확인하고 제어할 수 있게 합니다.
    - 로그인/로그아웃 상태가 변경되면 `auth_state_changed` 시그널을 보내 `DataManager`가 즉시 이를 인지하고 대응하도록 합니다.

### `providers/`: 데이터 소스의 구현체
- **`google_provider.py`**: Google 캘린더 연동을 담당합니다.
    - `google-api-python-client` 라이브러리를 사용하여 Google Calendar API와 통신합니다.
    - 사용자의 캘린더 목록과 특정 기간의 이벤트 목록을 가져옵니다.
    - 멀티스레딩 환경에서 안전하게 동작하도록 스레드별로 별도의 API 서비스 객체를 생성하여 관리합니다.
- **`local_provider.py`**: 로컬 데이터베이스 연동을 담당합니다.
    - SQLite 데이터베이스(`calendar.db`)에 이벤트 정보를 저장하고 관리합니다.
    - `dateutil.rrule` 라이브러리를 사용하여 반복 일정 규칙(RRULE)을 해석하고, 특정 기간에 해당하는 모든 반복 이벤트를 생성하여 반환하는 복잡한 로직을 처리합니다.

### `ui_main.py` 및 `views/`: 사용자 인터페이스
- **`MainWidget`**: 애플리케이션의 메인 윈도우입니다.
    - 프레임 없는 투명 윈도우를 생성하고, 창 드래그 및 크기 조절 로직을 직접 구현합니다.
    - `QStackedWidget`을 사용하여 `MonthViewWidget`와 `WeekViewWidget` 간의 화면 전환을 관리합니다.
    - 우클릭 컨텍스트 메뉴(새로고침, 설정, 종료)를 제공합니다.
- **`MonthViewWidget`**: 월별 뷰를 그립니다.
    - `QGridLayout`을 사용하여 달력 형태의 UI를 구성하고, 날짜별 셀(`DayCellWidget`)을 배치합니다.
    - 이벤트의 시작일, 종료일, 길이에 맞춰 `EventLabelWidget`을 여러 셀에 걸쳐 동적으로 그리고 배치합니다.
    - 한 셀에 표시할 수 있는 이벤트 개수를 초과하면 "+N개 더보기" 버튼을 만들어 `MoreEventsDialog`를 통해 모든 이벤트를 보여줍니다.
- **`WeekViewWidget`**: 주별 뷰를 그립니다.
    - 시간대별로 이벤트를 표시하는 타임라인 형태의 UI를 제공합니다.
    - `QScrollArea`를 사용하여 24시간 타임라인을 스크롤할 수 있습니다.
    - 종일 이벤트는 상단의 별도 영역에 표시합니다.
    - 현재 시간을 나타내는 빨간색 라인을 실시간으로 표시합니다.

### 각종 다이얼로그 (`event_editor_window.py`, `settings_window.py` 등)
- 이들은 특정 작업을 위해 임시로 나타나는 창들입니다.
- **`EventEditorWindow`**: 새 일정 추가 및 기존 일정 수정을 위한 UI를 제공하며, `recurrence_dialog.py`와 연동하여 복잡한 반복 규칙을 설정할 수 있습니다.
- **`SettingsWindow`**: Google 계정 연동, 캘린더 선택, 색상/이모지 커스터마이징, 동기화 주기, 투명도 등 다양한 설정을 변경할 수 있는 UI를 제공합니다.

## 4. 데이터 흐름 예시

### 애플리케이션 시작 시
1. `ui_main.py`가 실행되어 `settings.json`에서 설정을 로드합니다.
2. `MainWidget`이 생성되고, 이어서 `DataManager` 인스턴스를 생성합니다.
3. `DataManager`는 `AuthManager`를 초기화하고, `token.json`을 통해 현재 로그인 상태를 확인합니다.
4. `DataManager`는 `setup_providers`를 호출하여 `LocalCalendarProvider`와 (로그인 시) `GoogleCalendarProvider`를 준비합니다.
5. `MainWidget`은 `data_manager.load_initial_month()`를 호출하여 오늘 날짜가 포함된 달의 데이터 로드를 요청합니다.
6. `DataManager`는 캐시를 확인하고, 데이터가 없으면 `CachingManager`에게 해당 월의 데이터 로드를 요청합니다.
7. `CachingManager`는 백그라운드 스레드에서 각 Provider로부터 데이터를 가져와 캐시에 저장합니다.
8. 데이터 로드가 완료되면 `DataManager`는 `data_updated` 시그널을 보내고, `MonthViewWidget`는 이 신호를 받아 화면에 달력과 이벤트를 그립니다.

### 새 이벤트 추가 시
1. 사용자가 `MonthViewWidget`의 특정 날짜를 더블클릭합니다.
2. `MonthViewWidget`는 `add_event_requested` 시그널을 발생시킵니다.
3. `MainWidget`는 이 시그널을 받아 `EventEditorWindow`를 생성하여 화면에 표시합니다.
4. 사용자가 일정 정보를 입력하고 '저장' 버튼을 클릭합니다.
5. `MainWidget`는 `editor.get_event_data()`를 통해 UI에 입력된 정보를 API 친화적인 딕셔너리 형태로 가져옵니다.
6. `MainWidget`는 `data_manager.add_event(event_data)`를 호출합니다.
7. `DataManager`는 `event_data`에 포함된 `provider` 정보에 따라 `GoogleCalendarProvider` 또는 `LocalCalendarProvider`의 `add_event` 메서드를 호출합니다.
8. Provider는 데이터를 Google 서버 또는 로컬 DB에 저장하고, 성공 시 생성된 이벤트 정보를 반환합니다.
9. `DataManager`는 반환된 이벤트로 내부 캐시를 업데이트하고, `data_updated` 시그널을 발생시켜 UI를 즉시 갱신합니다.

## 5. 데이터 저장소

- **`settings.json`**: 창 위치/크기, 선택된 캘린더 ID 목록, 커스텀 색상/이모지 등 사용자의 UI 설정을 저장하는 JSON 파일입니다.
- **`calendar.db`**: `LocalCalendarProvider`가 사용하는 SQLite 데이터베이스 파일입니다. `events` 테이블에 이벤트 정보를 저장하며, 특히 반복 규칙(`rrule`)을 별도 컬럼에 저장하여 관리합니다.
- **`token.json`**: Google 계정 로그인 시 발급되는 OAuth 2.0 액세스 토큰과 리프레시 토큰을 저장합니다. 이 파일이 있으면 자동 로그인이 가능합니다.
- **`cache.json`**: `DataManager`가 Provider로부터 가져온 월별 이벤트 데이터를 저장하는 캐시 파일입니다. 앱 재시작 시 이 파일을 먼저 읽어 초기 로딩 속도를 향상시킵니다.
- **`credentials.json`**: (사용자가 제공해야 하는 파일) Google Cloud Platform에서 발급받은 API 사용 자격 증명 정보가 담긴 파일입니다.

## 6. 결론

이 프로젝트는 견고하고 확장 가능한 아키텍처를 기반으로 구축된 기능적인 데스크톱 캘린더 애플리케이션입니다. 모델, 뷰, 컨트롤러의 역할 분리, Provider 패턴을 통한 데이터 소스의 추상화, 그리고 백그라운드 스레딩을 통한 UI 반응성 확보 등 잘 설계된 소프트웨어의 특징들을 명확하게 보여줍니다. 각 모듈은 독립적인 역할을 수행하면서도 시그널-슬롯 메커니즘을 통해 유기적으로 상호작용하여 전체 시스템을 완성합니다.
