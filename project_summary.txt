# DCWidget 프로젝트 종합 보고서

## 1. UI/UX 개선 요청사항 (사용자 제안)

다음은 사용자가 요청했던 UI/UX 개선 사항 목록입니다. (현재는 '동기화완성' 버전으로 코드가 되돌려져 대부분 반영되지 않은 상태입니다.)

- **디자인 테마 통일:**
  - [미반영] 모든 컨텍스트 메뉴(우클릭 메뉴)의 색상을 앱의 기본 다크 테마로 통일.
  - [미반영] 설정 창과 일정 편집 창에 메인 창과 동일한 다크 테마 디자인 적용.
  - [미반영] 삭제 확인창(`QMessageBox`)의 가독성 개선 (다크 테마 적용).

- **창 동작 개선:**
  - [미반영] 설정 창과 일정 편집 창의 기본 제목 표시줄을 제거하고, 마우스로 직접 드래그하여 이동할 수 있도록 변경.

- **컨텍스트 메뉴 구조 통일:**
  - [미반영] 모든 우클릭 메뉴를 "상황별 메뉴 + 구분선 + 공통 메뉴(새로고침/설정/종료)"의 일관된 구조로 변경.
    - 이벤트 위: [수정, 삭제] + [공통 메뉴]
    - 빈 날짜 위: [일정 추가] + [공통 메뉴]
    - 그 외 공간: [공통 메뉴]

- **정보 표시 강화:**
  - [미반영] 월력 뷰의 색상 블록 위에 일정 제목을 직접 표시.


## 2. 개발 노트 및 주요 변경사항

- **영구 캐시 도입:** 앱을 재시작해도 데이터를 유지하기 위해 `cache.json`을 이용한 파일 캐시 시스템을 구현했습니다.
- **지능형 캐싱 매니저:**
  - `QThread`를 이용해 모든 네트워크 작업을 처리하는 백그라운드 `CachingManager`를 구현하여 UI 먹통 현상을 해결했습니다.
  - 단순 프리로딩에서 발전하여, 사용자의 이동 방향을 예측하고 우선순위를 부여하는 **"롤링 큐"** 방식을 도입했습니다.
  - 캐시가 무한정 커지는 것을 방지하기 위해, 현재 위치에서 가장 먼 데이터를 삭제하는 **캐시 크기 제한 및 관리(LRU-like Eviction)** 정책을 추가했습니다.
- **스레드 안정성 확보:**
  - **UI 먹통 문제 해결:** 주기적 동기화 작업이 메인 스레드에서 실행되어 발생하던 문제를, 모든 동기화 로직을 백그라운드 `CachingManager`로 이전하여 해결했습니다.
  - **사용자 작업 우선 처리:** 사용자가 설정/편집 창을 열면 백그라운드 동기화가 자동으로 일시정지되고, 창을 닫으면 재개되는 **"동기화 일시정지"** 메커니즘을 구현했습니다.
  - **API 클라이언트 충돌 해결:** `google-api-python-client`가 스레드에 안전하지 않은 문제를 해결하기 위해, 각 스레드가 독립적인 API 서비스 객체를 갖도록 `GoogleCalendarProvider`를 수정했습니다.
  - **UI 위젯 충돌 해결:** 사용자 입력과 백그라운드 데이터 업데이트가 충돌하여 발생하던 `RuntimeError`를, UI 전체 새로고침 대신 이벤트만 다시 그리도록 수정하여 해결했습니다.
- **데이터 일관성 및 CRUD 완성:**
  - 모든 이벤트 객체에 출처(`provider`) 정보를 포함하도록 하여 데이터 구조를 통일하고, 이를 통해 삭제 기능이 정상 동작하도록 수정했습니다.
  - CRUD(생성, 읽기, 수정, 삭제) 작업 시, 전체 캐시를 비우는 대신 메모리 캐시를 직접 조작하여 깜빡임 없는 즉각적인 UI 반응을 구현했습니다.
- **버그 수정:** `KeyError`, `AttributeError`, `SyntaxError`, `QWidget 생성 순서 오류` 등 다수의 버그를 수정하며 안정성을 높였습니다.


## 3. 개발 로드맵 (초기 계획)

1.  **영구 캐시 도입:** 앱 재시작 시 데이터 유지.
2.  **지능형 캐싱 매니저 구현:** 점진적 로딩, 동적 버퍼링, 주기적 동기화.
3.  **UI 즉각 반응 및 비동기 표시:** 캐시되지 않은 달로 이동해도 멈춤 없이 즉각 반응.
4.  **편의 기능 및 CRUD 최종 완성:** 월 선택, 미리보기, CRUD 기능 완성.


## 4. 현재까지 진행 상황 분석

- **1단계 (영구 캐시):** **완료**
- **2단계 (지능형 캐싱):** **완료 및 초과 달성.** (점진적/동적 로딩, 방향성 예측, 크기 제한, 사용자 설정 가능한 주기적 동기화 기능까지 모두 구현됨)
- **3단계 (UI 즉각 반응):** **완료.** (모든 네트워크 작업이 백그라운드에서 처리되어 UI가 멈추지 않음)
- **4단계 (편의 기능 및 CRUD):** **부분 완료.**
  - **CRUD:** 생성(Create), 읽기(Read), 수정(Update), 삭제(Delete) 기능이 **모두 완성**되었습니다.
  - **편의 기능:** "사용자 설정 가능 동기화 주기" 기능이 구현되었습니다. 하지만 UI/UX 개선 요청사항들은 현재 코드에 반영되지 않은 상태입니다.


## 5. 앞으로의 과제

1.  **UI/UX 개선 재시도:** 현재의 안정적인 코드를 기반으로, 이전에 실패했던 UI/UX 개선 요청사항(디자인 통일, 프레임리스 창, 메뉴 구조 통일)을 다시 한번 신중하게 적용합니다.
2.  **정보 표시 강화:** 월력 뷰의 이벤트 블록에 제목을 표시하여 가독성을 높입니다.
3.  **편의 기능 추가:**
    - 특정 년/월로 바로 이동할 수 있는 "날짜 이동" 기능.
    - 목록 뷰(`ListView`) 기능 개선 (예: 여러 달의 일정 표시, 검색 기능 등).
4.  **코드 리팩토링 및 정리:** 현재는 기능 구현에 집중했지만, 추후 유지보수를 위해 코드의 가독성을 높이고 중복을 제거하는 작업을 진행할 수 있습니다.
5.  **아이콘 및 세부 디자인 개선:** 앱의 완성도를 높이기 위한 시각적 다듬기 작업을 진행합니다.
